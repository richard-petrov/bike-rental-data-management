# AUTOGENERATED! DO NOT EDIT! File to edit: ../bike_rental_pipeline.ipynb.

# %% auto 0
__all__ = ['jc_files', 'df_jc', 'engine']

# %% ../bike_rental_pipeline.ipynb 3
import seaborn as sns
import pandas as pd
from matplotlib import pyplot as plt
import glob
import sqlalchemy as sql
import psycopg2

# %% ../bike_rental_pipeline.ipynb 4
import warnings

# Заранее отключим ворнинги
warnings.filterwarnings("ignore") # Заранее уберем ворнинги

# %% ../bike_rental_pipeline.ipynb 8
jc_files = glob.glob(r'..\bike_rental_data\data\JC-2016**-citibike-tripdata.csv')
jc_files

# %% ../bike_rental_pipeline.ipynb 9
#Citi Bike data from Jersey City

df_jc = []

# %% ../bike_rental_pipeline.ipynb 10
for file in jc_files:
    df_jc.append(pd.read_csv(file))

df_jc = pd.concat(df_jc).reset_index(drop=True)

# %% ../bike_rental_pipeline.ipynb 11
df_jc.columns = df_jc.columns.str.lower()
df_jc.columns = df_jc.columns.str.replace(' ', '_')

# %% ../bike_rental_pipeline.ipynb 12
# Print head of datasets for the 12 months of 2016 united

print('Initial data head:')
print()

df_jc.head(5)

# %% ../bike_rental_pipeline.ipynb 13
df_jc.describe()

# %% ../bike_rental_pipeline.ipynb 14
df_jc.info()

# %% ../bike_rental_pipeline.ipynb 15
# None check

(
    df_jc.isna()
    .sum()
    .sort_values(ascending=False)
)

# %% ../bike_rental_pipeline.ipynb 19
df_na.columns = df_na.columns.str.lower()
df_na.columns = df_na.columns.str.replace(' ', '_')

# %% ../bike_rental_pipeline.ipynb 20
# Print head of weather dataset

print('Initial data head:')
print()
df_na.head(5)

# %% ../bike_rental_pipeline.ipynb 21
df_na.describe()

# %% ../bike_rental_pipeline.ipynb 22
df_na.info()

# %% ../bike_rental_pipeline.ipynb 23
# None check

(
    df_na.isna()
    .sum()
    .sort_values(ascending=False)
)

# %% ../bike_rental_pipeline.ipynb 40
# Creating connection to database
engine = sql.create_engine('postgresql://postgres:8231@localhost:5432/bike_rental_data_management')

# %% ../bike_rental_pipeline.ipynb 41
# Writing jc_ride table to database
df_jc_ride.to_sql('jc_ride', engine)
df_start_station.to_sql('start_station', engine)
df_end_station.to_sql('end_station', engine)

# Writing na table to database
df_na_station.to_sql('na_station', engine)
df_na_weather.to_sql('na_weather', engine)
